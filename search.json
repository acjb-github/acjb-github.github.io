[{"title":"The Linux Command Line 学习笔记","path":"/2025/03/14/TLCL/","content":"0. 前言1、当前版本：U1.250314 2、跳过的章节：vi简介、自定制shell提示符、打印 1. 什么是shell1、shell是一个接收由键盘输入的命令, 并将其传递给操作系统来执行的程序 2、提示符中的符号 # 代表以超级用户权限执行，$ 代表以普通用户权限执行 3、系统后台持续运行中的虚拟终端可以通过按下 Ctrl-Alt-F1 到 Ctrl-Alt-F6 访问 2. 文件系统跳转1、pwd ：打印工作目录 2、ls ：列出工作目录下的文件与目录 参数为多个路径时，即可同时列出多个路径下的文件 -a (all) 列出所有文件，包括以&quot;.&quot;字符为名称开头的隐藏文件 -l (long) 仅显示当前目录下所有内容的详细信息 -d (directory) 仅显示当前目录的详细信息 -t (time) 以修改时间来排序 -S (Storage) 以空间占用大小来排序 -r (reverse) 以降序显示结果（字母/时间/大小） -h (human-readable) 以人类认知的单位为格式显示大小，而不是以字节数 -F (classify) 输出时指示类型 / 代表目录 @ 代表符号链接 * 代表可执行文件 = 代表套接字 | 代表管道 没有后缀 代表是一个普通文件 3、cd ：跳转到指定目录 cd - 代表跳转到上一个cd的目录 4、绝对路径：以 / 依次表示的树形路径 5、相对路径：用 . 代表当前目录，用 .. 代表父目录 3. 探究操作系统1、file ：打印出文件的描述信息 2、less ：一个页面查看器，用于只读地查看文本内容。由于是分页加载到内存的，所以大文件阅读有优势 3、常见文件路径： /bin (/usr/bin) 存放由系统自带的用户权限程序 /sbin (/usr/sbin) 存放由系统自带的超级用户权限程序 /boot 存放系统启动时的加载程序，以及Linux内核 /dev 设备结点目录 /etc 存放系统配置文件，以及开启系统服务的shell脚本 /lib (/usr/lib) 存放安装的所有程序运行和编译时共享的动态链接库文件 /lost+found 文件系统恢复目录 /media 可移动介质挂载目录 /proc 内核维护的虚拟文件系统，用于读取系统状态 /usr/local 存放非系统自带的程序的数据 由源码编译的程序安装在其中的bin文件夹 头文件安装在其中的include文件夹 /usr/share 存放系统安装的所有程序运行时共享的静态数据，如doc文件夹下的帮助文档 /var 存放程序运行时的各种动态文件，如数据库，日志文件等 4. 操作文件和目录1、常见通配符： * 用于匹配任意个字符（可以是0个或1个） ? 用于匹配任意一个字符 [] 用于匹配用户指定的字符集中的任意一个字符，如[abc] [!] 用于匹配不是用户指定的字符集中的任意一个字符，如[!abc] [[:XXX:]] 用于匹配系统指定的字符集中的任意一个字符 可以和用户指定的连用。如：[[:alnum:]]、[[:lower:]123] 常用的字符集： alnum(字母+数字) alpha(字母) digit(数字) punct(标点符号) lower(小写字母) upper(大写字母) 2、mkdir ：创建目录 后面跟多少个argument，就会在当前工作目录创建多少个目录 3、cp ：复制文件内容（例如文本）/目录到指定的文件/目录中 可以跟多个argument，会把前几个argument的内容复制到末尾argument指定的文件/目录中去 -a (archive) 带属性复制 -i (interactive) 交互式复制，复制时遇到问题先提醒用户 -r (recursive) 递归地复制目录及目录中内容 -u (update) 只复制目标目录中不存在的文件，或对目标目录中已存在但是更旧的文件进行覆写 -v (verbose) 显示复制过程的操作信息 4、mv ：移动文件。其argument与option的引用方式和cp一样 当目标argument不存在时，会按照源argument进行隐含类型创建 5、rm ：删除文件。可以跟多个argument。rm的option有-v/-i/-r，和前面cp的一样 -f (force) 即使部分argument指定的文件或目录不存在，也照常执行 执行此option时，忽略-i option 6、ln ：创建硬链接或符号链接 创建硬链接：形如 ln file link 创建符号链接，形如 ln -s item link 5. 使用命令1、命令可以是以下五种形式之一： bin路径下存储的二进制程序 ruby等脚本语言写成的程序 shell内建命令 由alias指定的别名 shell会话函数（会话关闭时消失） 2、type ：显示命令的类型，如：是哪个二进制程序、是否为内建命令、是否为别名 3、which ：找到命令依赖的可执行程序的路径，对内建命令无效 4、help ：给出内建命令的帮助文档 5、man ：给出命令的程序手册 man 数字 &lt;命令&gt; ：代表查看程序手册的第几节 -k ：用于通过搜索程序手册的关键词，显示适当的命令 6、程序自带的README存储在/usr/share/doc下，可通过less或zless（如果文档压缩为gzip）查阅 7、alias 用于给指定的命令序列创建别名 语法：alias &lt;别名&gt; = &#39;&lt;命令序列，中间用分号隔开&gt;&#39; 可通过unalias删除已设置的别名 定义的别名会随着会话结束而消失 如果不加任何参数，则代表查阅已创建的别名 6. 重定向1、输出重定向 &#39;&gt;&#39; 用于把输出信息写入到文件。每次使用时会导致内容覆写。如果文件不存在则会自动创建 如果不想要输出，可以将其输出到/dev/null &#39;&gt;&gt;&#39; 用于在已有文件内容后进行追加。如果文件不存在则会自动创建 &#39;数字&gt;&#39; 用于指定类型的重定向。0、1、2分别代表标准输入、输出、错误 &#39;&amp;&gt;&#39; 用于联合重定向。例如可以将标准输出和错误一起重定向到文件中去 2、cat ：将一个或多个文件连接为一个文件（指定输出时），或一起显示在屏幕上（未指定输出时） 不加任何argument时，cat会等待用户的标准输入。此时输入ctrl-d代表到达EOF -A 显示控制字符 -n 显示行号 -s 禁止输出多个空白行 3、管道符号&quot;|&quot; ：将一个命令的输出作为另一个命令的输入 &quot;|&quot;后可以加关键词，称为过滤器，它能实现对输入的数据进行预处理，再传输给下个命令 过滤器本身就是可单独执行的指令，常见的过滤器如下： tr（字符的查找和替换操作） tr &lt;arg1&gt; &lt;arg2&gt; 用字符范围arg2取代字符范围1，可以是字符类、字符域、枚举列表 -s 挤压，即删除相邻的重复字符，只保留一个 sort (排序) -b 从第一个非空白字符开始，对整行进行排序 -f 排序不区分大小写 -n 基于字符串的数值来排序 -m 只执行合并，不执行排序 -r 反向排序 -o 指定输出文件，而不是标准输出 -k &lt;num1&gt;.&lt;num2&gt; 指定第num1个字段，偏移&lt;num2&gt;个字符为排序标准 uniq (去重) -f &lt;num&gt; 开头的num个字段不作为去重标准 -s &lt;num&gt; 开头的num个字符不作为去重标准 -i 忽略大小写 -d 反向去重 -c 反向去重，并且每行开头显示重复的次数 wc (字数统计)：会输出行数、单词数和字节数。用-l option时只输出行数 grep (正则匹配) -i 匹配忽略大小写 -v 反向匹配 -c 打印匹配数量 -l 只打印包含匹配项的文件名 head/tail（打印头和尾的行） 默认10行，可以用-n &lt;num&gt; 指定打印行数 tail -f 可以持续监测末尾行的变化情况，并在屏幕上实时输出 tee (数据捕捉): 对结果不做任何处理，只是复制到指定文件，内容可流动到下一个管道中 例如：ls /usr/bin | tee ls.txt | grep zip 7. 从shell眼中看世界1、echo ：打印argument 2、常见的argument展开类型： 路径名展开：使用通配符进行匹配，例如ls \\usr\\*\\bin 波浪线展开：例如使用cd时，跟一个~（但不加用户名），那么cd会指向当前使用者的家目录 算术表达式展开：指的是$((expression))中，expression的算术表达式可以被计算 花括号展开：利用花括号内表达式创建多个文本字符串，例如echo Front-&#123;A,B,C&#125;-Back 表达式可以是一个整数区间，如&#123;1..5&#125;，倒序的字符区间&#123;Z..A&#125; 表达式还可以相互嵌套，如echo a&#123;A&#123;1,2&#125;,B&#123;3,4&#125;&#125;b 参数展开：将以$开头的变量的值进行输出 命令依赖：将命令的执行结果作为临时变量的值，然后再利用参数展开将其作为argument使用 如file $(ls /usr/bin/* | grep zip) 历史命令展开：以!开头。可将history命令搜寻的结果插入到命令行中 3、常见的argument引用类型： 双引号：用于防止因空格导致的argument单词分割，例如：ls -l &quot;two words.txt&quot; 在双引号中，除路径名展开外，所有类型的argument展开依然有效 单引号：双引号的加强版。会禁止内部的一切argument展开，如包含元字符的正则表达式 8. 键盘高级操作技巧1、history: 读取系统记录的，输入的最后500个命令 搜索得到的结果用行号区分，可直接用&#39;!&lt;数字&gt;&#39;的形式重复执行该命令 9. 权限1、文件属性：可以用-l 查看，共10个字符 第一个字符为文件类型，其中： - 代表普通文件 d 代表目录 l 代表符号链接。符号链接的文件属性总是为虚拟值rwxrwxrwx c 代表字符设备文件 b 代表块设备文件 剩余九个字符为文件模式，3个一组。依次代表文件所有者、文件组所有者、其他人的读写执行权限 r 允许打开并读取文件内容，或列出目录下的所有文件（当有x权限时） w 允许写入或截断文件，或在目录下新建、删除或重命名文件（当有x权限时） x 允许该文件被执行（若为脚本，还必须有r权限才可执行），或允许进入目录 2、chmod ：对于文件所有者或者超级用户，可通过执行此命令更改文件属性 语法：chmod &lt;权限及修改&gt; argument u代表user、g代表group、o代表other +代表增添、-代表删除、=代表设置 例如：u+x,go=rw 代表为拥有者增加可执行权限，为文件组用户和其他用户设定为读写权限 3、umask ：设置创建文件时的默认掩码值（以4个八进制数表示，如默认值0022） 语法：mask 0000 若无其他操作，设置的掩码只在本次shell会话中生效 4、sudo ：给予普通用户临时的超级用户权限以执行某些命令，要求该用户自己的密码验证 5、chown ：用于修改文件或目录的所有者或用户组，需要超级用户权限 语法：chown [owner]:[group] file 如果owner为空，组有设置，如:admins，则代表owner不变 如果owner不为空，组没有设置，如bob: 则代表将组设置为bob登录系统时所属的用户组 6、passwd 用于修改某个用户的密码 10. 进程1、ps 用于展示当前正在运行的进程 若执行ps x，则会额外增加一栏用于描述进程目前的状态 进程可能的状态如下： R 运行中，或准备运行 S 可中断睡眠 D 不可中断睡眠，通常是因为等待I/O T 已停止运行 Z 僵尸进程，通常是由于父进程未来得及清除已终止的子进程 &lt; 高优先级进程 N 低优先级进程（nice） 执行ps aux则会给出进程的硬件资源占用情况。如RSS（物理内存大小）和VSZ（虚拟内存大小） 2、top ：显示连续更新的系统进程列表 3、进程控制 ctrl-c 仅作用于前台进程：发送SIGINT，友好地请求进程终止执行（但可以被程序捕获并询问） ctrl-z 仅作用于前台进程：发送SIGTSTP，暂停进程执行 kill 对任意进程发送信号（不论是前台还是后台），可以用option来指定发送什么 语法：kill -option PID/jobspec -TERM 缺省值，强行终止进程，目标程序会接收到这个信号 -INT 类似于ctrl-c -KILL TERM的加强版，直接由内核杀死。目标程序不会接收到这个信号 -STOP 类似于ctrl-z -CONT 令进程从暂停状态中恢复 kill all 用于给匹配特定名称的多个进程发送信号 语法：killall [-u user] [-signal] name 一般加sudo使用，因为可能该进程归属于其他用户 命令后加&amp;，会令进程启动后立刻在后台执行，并返回jobspec和PID 使用fg/bg %jobspec，可令对应的进程返回前台/进入后台运行（foreground/background） 11. shell 环境1、shell中有两种数据类型: 环境变量和shell变量 printenv指令不带参数时，只会打印环境变量 set指令不带参数时，会将环境变量和shell变量都打印 由于环境变量列表比较长，所以输出时最好通过管道传递给less set命令和printenv命令都不能显示别名 2、重要的环境变量 PATH：等同于Windows的PATH TERM：指定终端所使用的协议类型 3、shell会话的两种类型:login shell和non-login shell 如果要添加PATH或定义额外的环境变量，则应该修改家目录下的.bash_profile 如果要添加别名或其他设置，则应该修改家目录下的.bashrc 使用source指令，在不重启bash的情况下重新读取配置文件，如source .bashrc 4、export：用于设置环境变量。例如在bashrc中修改代表提示符的PS1后，需要对其export 14. 软件包管理1、底层软件包安装/升级（如果已安装旧版本）指令：dpkg --install &lt;文件&gt;，不自动处理依赖 2、确定是否安装一个指定的软件包：dpkg --status &lt;软件名&gt; 3、显示所安装软件包的信息：apt-cache show &lt;软件名&gt; 4、确定哪个软件对所安装的某个文件负责 dpkg --search &lt;文件路径&gt; 15. 存储媒介1、/etc/fstab 列出了系统启动时要挂载的设备（例如系统分区），典型的字段如下 设备名：包含与物理设备相关联的设备名，如/dev/hda1 挂载点：设备所连接到的文件系统树的目录 文件系统类型：如ext4，swap等 选项：挂载时的选项参数, 如只读 2、mount：挂载设备到指定的文件系统上 不带参数时会调出目前已经挂载的文件系统列表 语法：设备 on 挂载点 type 文件系统类型 如果mount的路径参数为非空目录，则在unmount前无法查看该目录下原有的文件 3、unmont：卸载设备 如果当前工作目录还在挂载点，则会导致卸载失败 卸载的目的在于让设备在退出前，将缓存安全地写入低速设备，防止数据丢失 4、设备命名模式 /dev/sd* SCSI磁盘 /dev/hd* IDE磁盘 /dev/lp* 打印机 /dev/sr* 光盘 使用字母对设备进行编号，例如第一通道的主从设备编号ab，第二通道的主从设备编号cd 使用数字对分区进行编号，例如第一分区编号1。没有数字时则代表整个磁盘 5、fdisk：执行磁盘分区程序 6、mkfs：创建文件系统，例如mkfs -t &lt;文件系统类型&gt; &lt;设备名&gt; 7、fsck：测试和修复文件系统，恢复的部分被放置于 lost+found 目录 8、dd：以底层模式（块模式）将数据从一个设备复制到另一个设备/文件 复制为文件：dd if=/dev/sdb of=flash_drive.img 复制到设备：dd if=/dev/sdb of=/dev/sdc 16. 网络系统1、traceroute：显示到达网址所需的路由器跳数 2、netstat：查看系统网络信息 -ie：查看网络接口。通常注意第二行的ip地址和第四行的单词UP，代表这个网络接口已经生效 -r：显示内核的网络路由表 3、ftp：即文件传输协议 用ftp &lt;服务器名&gt;登录到服务器后，可以进行cd操作，并使用ftp get将服务器上的文件传输到本地 可使用lftp代替 4、wget：下载任意网络文件 5、ssh：用于连接远端SSH服务器，本质是建立了一条加密数据传输通道 使用：ssh &lt;远程主机名&gt; 或ssh &lt;用户名&gt;@&lt;远程主机名&gt;进行连接（如果已在主机上拥有用户） 如果ssh命令没有成功验证远程主机，则可能是：中间人攻击、远程系统配置改变 后者只需要根据警告信息移除过时的offending key即可 使用 ssh &lt;远程主机名&gt; &lt;指令名&gt; 进行远端指令执行 -X选项可以运行远程主机上的X Window并把图像化效果显示到本地 6、scp：用于实现ssh下的安全复制 7、sftp：是 ftp 的安全替代品。不过它并不需要远程主机运行ftp服务器, 只需要ssh 17. 查找文件1、locate: 通过文件名查找文件，会输出包含参数的路径名列表。可以使用管道进行正则搜索 locate依赖updatedb创建索引数据库，手动运行updatedb可以避免locate搜索不到的情况 可以通过-regex 选项使用正则表达式进行匹配 2、find：可以根据文件的各种属性在既定的目录及其子目录中查找 可以通过补充各种测试条件进行搜索 -type 代表按文件类型搜索，如l为符号链接，f为普通文件，d为目录 -name 代表按通配符模式进行搜索 -size 代表按大小进行搜索，如+1M代表大于1M的文件，-1M代表小于1M的文件 -empty 用于匹配空文件和目录 -inum 用于匹配inode号是n的文件。这对于找到某个inode的所有硬链接很有帮助 -newer 用于匹配内容修改日期晚于指定的文件的文件和目录 测试条件可以与逻辑符号连用，如-and、-or、-not和括号 由逻辑符号连接的表达式，越往前执行优先度更高（非常重要） 可以通过预定义操作对搜索结果进行处理 -delete 删除匹配的文件 -ls 执行结果等同于ls -d，结果发送到标准输出 -print 把匹配文件的全路径名输送到标准输出，这也是默认处理 -quit 一旦找到一个匹配就立即退出 可以通过-regex 选项使用正则表达式进行匹配 可以使用用户想要执行的操作命令代替预定义操作 语法：-exec &lt;指令&gt; &#39;&#123;&#125;&#39; &#39;;&#39; 如果用-ok来代替-exec，则每一次指定命令执行之前系统都会询问用户 如果&#39;;&#39;被替换为&#39;+&#39;，则不会每次匹配时执行指令，而是将结果作为一个整体执行 18. 归档和备份1、gzip：压缩一个或多个文件, 执行命令后原文件会被压缩文件取代，时间戳和权限保持不变 -d 用于解压缩，还原原文件。等同于gunzip -f 强制压缩，在压缩文件已存在时使用 -r 递归压缩 -t 测试压缩包 -v 输出详细信息 -&lt;num&gt; 代表压缩的等级，1代表最快压缩，9代表最大压缩 -c 将输出重定向到标准输出，并且保留原始文件 2、tar：归档文件为一个大文件，不进行压缩 语法：tar [选项] &lt;目标tar文件路径&gt; &lt;源路径&gt; tar的选项不带&#39;-&#39;号，常用的选项如下 c 创建文件和/或目录列表的归档文件 f 指定归档文件名，一定会有。如果后面跟&#39;-&#39;，则代表不创建归档文件，定向至标准输出 x 从归档中提取文件 提取的文件属于执行复原操作的用户，除非以超级用户身份运行 如果在后面添加路径名，则代表只恢复该路径下的内容 t 列出归档文件的内容 r 在归档文件末尾追加指定路径 v 输出详细信息 z 使用gzip进行压缩归档，输出tgz。与x连用代表从tar.gz中提取文件 j 使用bzip2进行压缩归档，输出tbz。与j连用代表从tar.bz中提取文件 3、rsync：实现与本地系统或远程系统的目录内文件同步 语法：rsync [选项] &lt;源路径&gt; &lt;目标路径&gt;。源路径或目标路径的可能格式如下 本地文件或目录 远程文件或目录, 形式为 [user@]host:path 远程rsync服务器, 形式为 rsync://[user@]host[:port]/path 19. 正则表达式1、基本正则表达式（BRE）中常见的元字符 [.X]：用于匹配在此位置的任意一个字符 [^X]：用于匹配以X开头的内容 [X$]：用于匹配以X结尾的内容，[^$]]会匹配空行 []：用于表示字符集，例如[bg]代表匹配开头为b或g的 如果插入字符出现在字符集中，则表否定，代表这些字符不应出现 使用连字符来表示范围，如[A-Za-z0-9]。如果连字符放在开头则表示其本身 2、扩展正则表达式（ERE）中常见的元字符（在BRE基础上增加） ()：用于分隔的括号 [|]：代表或。如&#39;^(bz|gz|zip)&#39; [?]：代表匹配其前面的元素0次或1次，如&#39;^\\(?[0-9][0-9][0-9]\\)?&#39; [*]：代表匹配其前面的元素多次或0次，如[[:upper:]][[:upper:][:lower:] ]*. [+]：代表匹配其前面的元素多次或至少1次 &#123;&#125;：代表匹配其前面的元素指定次数 &#123;n&#125;：用于匹配n次 &#123;n,m&#125;：用于匹配至少n次，不多于m次（闭区间） &#123;n,&#125;：用于匹配至少n次 &#123;,m&#125;：用于匹配不多于m次 3、vim和less可以使用正则表达式进行搜索（vim支持的是BRE，所以使用额外元符号需要转义） 20. 文本处理1、cut：从文本行中提取一段文字，并将其输出至标准输出 -f &lt;list&gt; 只提取list所列举的字段，list可以是由&#39;,&#39;分隔的数字 -c &lt;dist&gt; 只提取dist所列举的字符，list可以是由&#39;-&#39;给出的范围 -d &lt;arg&gt; 分析时指定arg为分隔符，而不是tab字符 2、paste：添加一个或多个文本列到文件中 3、join：类似于SQL里的联结，需要有公共字段，然后将具有公共字段的两个字段加以组合 4、comm：逐行比较两个已排序文件，结果以列的形式展开 语法：comm &lt;文件1&gt; &lt;文件2&gt; 第一列为文件1独有的文本行，第二列为文件2独有的文本行，第三列为共有的文本行 5、diff：用于检测文件之间的不同, 支持多种输出形式, 并且具备一次性处理大文件集的能力 使用-c 开启上下文模式，直观地指示修改 使用-u 开启统一模式，比上下文模式的输出结果简短 6、patch：通常和diff联合使用，对文件进行版本更新 7、sed：以行为单位读取和处理文本，并根据提供的命令对文本进行自动化编辑 语法：sed [选项] &#39;命令&#39; 文件名 常用选项： -n 安静模式，取消输出到标准输出 -i 直接修改输入文件 -e 允许指定多个命令，如sed [选项] -e &#39;命令1&#39; -e &#39;命令2&#39; ... -f 允许从脚本读取命令，如sed [选项] -f 脚本文件 文件名 -r 启用正则表达式 常用命令： s 用于替换，如s/旧文本/新文本/标志 标志可以为：g 全体替换、i 忽略大小写替换、&lt;num&gt; 替换第num个 分割符也可以使用#，避免转义 d 删除匹配行。如[地址]d。地址是以逗号分隔的行号区间，$代表末行 i 在匹配行之前插入新行。如[地址]i\\新文本。如果新文本有多行，可以使用 换行 a 在匹配行之后插入新行。如[地址]a\\新文本 c 将匹配行替换为新文本。如[地址]c\\新文本 8、aspell：一个交互式的拼写检查工具 21. 格式化输出1、nl：用于为输出增加行数提示 2、fmt：可以在格式化段落的同时，保留空白符和缩进 -w：设置行宽 -p：在每个段落的开头添加段落前缀 -c：按段落中第一行的缩进，对整段进行处理 23. 编译程序1、大多数源码在其目录下有一个configure程序，用于检查并安装必要的工具和组件，生成makefile 2、使用make根据makefile，对.c文件编译为.o文件并链接该模块到程序上 make只构建所需要构建的内容，而不是全部构建 3、打包良好的源码经常包括一个特别的 make 文件，叫做 install，用于直接安装程序 通过sudo执行 make install 使其安装到bin目录下 24. 编写第一个 Shell 脚本1、#! 字符序列又被称为shebang。用来告诉操作系统执行此shell脚本所用的解释器的名字 每个shell脚本都应该以shebang声明作为它的第一行，如#!/bin/bash 2、使用chmod 755（所有人可运行）或 700（只有文件所有者可运行）修改脚本的权限 3、shell语句末尾不使用分号 25. 启动一个项目1、为变量/常量赋值时，即自动创建变量/常量 一个惯例是用全大写字母表示常量，全小写字母表示变量 如果错误地拼写了一个变量，shell反而会将其创建并赋予默认值 2、常见的变量赋值类型 数字、字符串等基本格式 包含可展开的内容，如 c=&quot;a string and $b&quot;，或e=$((5 * 7)) 命令执行的结果，如 d=$(ls -l foo.txt) 3、here document：一种 I/O 重定向形式。其特性为 可随意嵌入引号而不会被shell识别 以command &lt;&lt; token开始，以token结束 token可以是_EOF_，command可以是cat 如果将 &lt;&lt; 替换为 &lt;&lt;-，则shell会忽略每一行开头的缩进，提高可读性 26. 自顶向下设计1、shell函数和C语言的函数定义类似，但不传参，需至少包含一条指令 2、在shell的引号内创建变量时，在其前面添加local关键字以创建局部变量，不需要再添加$ 3、通过在.bashrc文件中编写函数，可以起到和创建别名一样的效果 27. if分支结构1、if 的语法 if [commands]; then commands elif [commands]; then commands ... else commands fi 其中，用方括号括起来的command，实际等同于执行test command，即检查command的执行情况 使用复合命令[[expression]]，可以将command转变为expression 引入正则表达式判断 =~，如：[[&quot;$INT&quot; =~ ^-?[0-9]+$]] 使 == 操作符支持类型匹配，如：[[$FILE == foo.*]] 2、指令在执行时会返回参数，通过 变量 $? 可以查看其值 布尔值true的$?值为0，false为1 返回值可能是0到255的任意整数 3、文件表达式：用于计算文件状态 file1 -ef file2 ：file1 和 file2 拥有相同的索引号 file1 -nt file2 ：file1 新于 file2 file1 -ot file2 ：file1 早于 file2 -[文件属性] file ：file存在且拥有[文件属性] -[文件类型] file ：file存在且是一个[文件类型] 4、字符串表达式：用于计算字符串 -n string ：string 的长度大于零 -z string ：字符串 string 的长度为零 28. 读取键盘输入1、read：从标准输入读取单行数据 语法：read [-options] [variable...]variable可以有多个 如果接受到变量值数目少于期望的数字，那么额外的变量值为空，否则会覆盖到最后一个变量中 常用option： -a [数组]: 将读取到的数据存储到特定数组中（从0开始） -d [字符串]: 使用指定的字符串的第一个字符作为输入结束的指示符，而不是换行符 -n [num]: 读取num个字符 -p [prompt]: 为输入增加提示信息prompt -r : 不把反斜杠字符解释为转义字符 -s : 不回显输入，适用于密码等敏感信息输入 -t [seconds]: 使read在seconds秒后超时，并返回一个非零退出状态 2、IFS：一个shell变量，用于定义shell如何分割单词 默认值：空格、制表符和换行符 可以在read指令前临时更改IFS，使其适应不同字符串的分割情形 如：IFS=&quot;:&quot; read -r first_name last_name age city &lt; data.txt 29. while&#x2F;until 循环1、while 的语法 while [commands]; do commands done 当遇到一个非零退出状态时，while 退出循环 2、continue和break指令和C语言中的用法一致 3、当遇到一个非0退出状态时，until 不退出，直到接受了一个为0的退出状态 until 的结构与while类似 30. 疑难排解1、在shebang后面加入-x option，可用于跟踪脚本执行流程 使用 set 命令，可为脚本中的一块选择区域，而不是整个脚本启用追踪 使用set -x 作为追踪开始行，set +x 作为追踪结束行 31. 流程控制：case 分支1、case 的语法 case 单词 in 模式) 命令... ;;&amp; esac 常用模式： a) 若单词为a，则匹配 [[:alpha:]]) 若单词是一个字母字符，则匹配 ???) 若单词只有 3 个字符，则匹配 *.txt) 若单词以.txt为扩展名，则匹配 *) 匹配任意单词。可以把这个当成C语言中的default来用 还可以使用竖线字符作为分隔符，把多个模式结合起来 32. 位置参数1、位置参数：一个变量集合，包含命令行中所有的参数（如option、argument等） 用于给shell脚本或shell函数传递参数，在自己编写带有option的函数或脚本时很有用 如：posit-param a b c d，则包含$0 - $4 五个位置参数 $0 总是存在，为执行脚本的命令（路径），如/home/me/bin/posit-param 大于9的位置参数需要用花括号括起来，如 $&#123;10&#125; 位置参数可以与case连用，以达到执行option的效果 2、$# ：可用于确定参数的个数 3、$* ：代表命令行中所有的参数，但把所有参数看成一个整体，所以长度是1 4、$@ ：也代表命令行中所有的参数，但把所有参数按原位置独立区分（更实用） 33. 流程控制：for 循环1、for 的语法 for 遍历变量 in [words]; do commands done 或（与C语言一致） for ((expression1; expression2; expression3)); do commands done words列表的创建是多样化的，如： 路径名展开：for i in distros*.txt 花括号展开：for i in &#123;A..D&#125; 命令替换：for i in $(strings $1) 34. 字符串和数字1、空变量展开 $&#123;parameter:-word&#125; ：若parameter为空或未定义，则展开结果为word 位置参数或其他特殊参数不能以该方式赋值 $&#123;parameter:?word&#125; ：若parameter为空或未定义，则将错误信息输出到标准错误输出中 $&#123;parameter:+word&#125; ：若parameter已设置且不为空，则展开结果为word $&#123;parameter:=word&#125; ：如果parameter为空或未定义，则展开结果为word 同时，会将word赋值给parameter 2、字符串展开 $&#123;#parameter&#125; ：获取字符串长度 $&#123;parameter:offset&#125; ：从offset开始提取length长度的子字符串，不加length则提取到末尾 $&#123;parameter#pattern&#125; ：从字符串开头删除最短匹配pattern $&#123;parameter##pattern&#125; ：从字符串开头删除最长匹配pattern $&#123;parameter%pattern&#125; ：从字符串结尾删除最短匹配pattern $&#123;parameter%%pattern&#125; ：从字符串结尾删除最长匹配pattern $&#123;parameter/pattern/string&#125; ：查找并替换第一个匹配pattern $&#123;parameter//pattern/string&#125; ：查找并替换所有匹配pattern $&#123;parameter/#pattern/string&#125; ：仅当匹配pattern在字符串开头时替换 $&#123;parameter/%pattern/string&#125; ：仅当匹配pattern在字符串结尾时替换 $&#123;parameter,,&#125; ：全部转换为小写 $&#123;parameter,&#125; ：首字母转换为小写 $&#123;parameter^^&#125; ：全部转换为大写 $&#123;parameter^&#125; ：首字母转换为大写 3、整数求值与展开 算术表达式展开 ：$((expression)) base#number ：以base为基数的数 数值运算、逻辑运算、位运算符号与C语言中的一致，除了幂运算：** 4、bc ：一个独立的命令行计算器程序，支持高精度计算 可以读取脚本文件，其语法类似于C语言。如 bc &lt; foo.bc 也可以交互式使用，如 bc &lt;&lt;&lt; &quot;2+2&quot; 35. 数组1、bash 只支持一维数组 2、数组的创建 显式创建：declare -a 数组名 隐式创建：数组名[index]=value 3、数组的赋值 列表形式：数组名=(value1 value2 value3 ...) 索引形式：数组名=([5]=&quot;value1&quot; [1]=&quot;value1&quot; [3]=&quot;value1&quot; ...) 4、数组的访问 使用下标 * 可以访问所有数组元素，但把所有参数看成一个整体，所以长度是1 使用下标 @ 也可以访问所有数组元素，但把所有参数按原位置独立区分 通常与for循环连用，用于遍历所有元素 5、数组的操作 $&#123;#数组名[@]&#125; ：获取数组长度 $&#123;#数组名[index]&#125; ：获取特定元素的长度 $&#123;!array_name[@]&#125; ：获取已使用的下标列表 数组名+=(element1 element2 ...) ：在数组末尾追加 unset 数组名：删除数组 unset 数组名[index]：删除数组元素 array2=(&quot;$&#123;数组名[@]&#125;&quot;)：复制数组 6、关联数组（类似于map，使用字符串作为索引） 声明：declare -A 数组名 36. 奇珍异宝1、组命令和子shell 目的：将多个命令组合在一起，主要用于方便地管理重定向和管道 组命令：形如&#123; command1; command2; [command3; ...] &#125; 花括号与命令之间必须有空格 最后一个命令必须以分号或换行符结尾 对环境变量的修改会影响当前shell 子shell：形如(command1; command2; [command3;...]) 其功能与组命令类似，但在新的shell环境中执行命令 当子shell结束后, 创建的环境变量会被消除 2、进程替换：一种特殊的展开，允许将子 shell 的输入/输出当作普通文件处理 &lt;(list) ：适用于产生标准输出的进程 &gt;(list) ：适用于接受标准输入的进程 3、命名管道：一种特殊的文件，用于在不同终端间建立连接 特性： 数据从一端进入，从另一端流出，遵循FIFO原则 如果管道的一端没有进程来读取数据，写入端会挂起（阻塞） 创建：mkfifo 管道名 语法： 在一个终端中重定向，如ls -l &gt; pipe1 随后在另一个终端中读取，如cat &lt; pipe1 4、trap ：用于捕获特定信号 语法：trap argument signal/[signal...] argument是一个字符串，被读取并当作一个命令 5、wait ：用于实现异步执行 语法：wait $&#123;pid&#125;","tags":["Linux","Shell"]},{"title":"关于","path":"/about/index.html","content":"友链关于昵称简介 关于本站 本站没有任何推广和打赏链接，如果您觉得哪个作品不错，欢迎去对应的仓库点个赞，或者在对应的文章下面留言互动一下。 开源项目无任何盈利目的，只在工作闲暇时间进行维护，有相关需求请前往对应项目提 Issue 进行反馈，通过私人邮件询问开源项目问题可能得不到答复。"},{"title":"收藏","path":"/bookmark/index.html","content":"…"},{"title":"探索","path":"/explore/index.html","content":"…"},{"title":"友链","path":"/friends/index.html","content":"友链关于小伙伴们如果宇宙中真有什么终极的逻辑，那就是我们终有一天会在舰桥上重逢，直到生命终结。 [2023-12] 友链失联了怎么办?添加友链后如果网站长期无法访问，可能会被取消友链！如果您的网站恢复了，可以在申请友链时创建的那条 issue 中评论告知。 朋友们近期的文章 如何交换友链？ 您的网站应满足以下全部条件： 安全合规：合法的、非营利性、无木马植入的 HTTPS 站点。 非空壳网站：网站内发布至少 五篇 原创文章，内容题材不限。 我们需要有一定的有效互动： 先友后链：与博主有至少 半年 的有效互动，例如 issue 或者评论留言。 [2023-12] 友链申请条件变更说明降低了对商业广告的要求，可以有但是不能太多。提高了「有效互动」的定义：5次更改为半年。 我已满足全部条件，快告诉我如何交换友链！如果您没有满足上述条件，即时提交了申请也不会通过哦～第一步：新建 Issue新建 GitHub Issue 按照模板格式填写并提交。为了提高图片加载速度，建议优化头像：打开 压缩图 上传自己的头像，将图片尺寸调整到 144px 后下载。将压缩后的图片上传到 去不图床 或者其它稳定的图床并使用此图片链接作为头像。第二步：添加友链并等待管理员审核请添加本站到您的友链中：1234title: xxxurl: https://xxx.comavatar: screenshot: 待管理员审核通过，添加了 active 标签后，回来刷新即可生效。如果您需要更新自己的友链，请直接修改 issue 内容，大约 3 分钟内生效，无需等待博客重新部署。"},{"title":"朋友文章","path":"/friends/rss/index.html","content":""},{"title":"Page","path":"/page/index.html","content":"This is a page test."}]